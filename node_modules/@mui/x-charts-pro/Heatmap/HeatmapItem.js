import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["seriesId", "dataIndex", "color", "value", "slotProps", "slots"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { styled } from '@mui/material/styles';
import useSlotProps from '@mui/utils/useSlotProps';
import composeClasses from '@mui/utils/composeClasses';
import { useItemHighlighted } from '@mui/x-charts/context';
import { useInteractionItemProps } from '@mui/x-charts/internals';
import { getHeatmapUtilityClass } from "./heatmapClasses.js";
import { jsx as _jsx } from "react/jsx-runtime";
const HeatmapCell = styled('rect', {
  name: 'MuiHeatmap',
  slot: 'Cell',
  overridesResolver: (_, styles) => styles.arc
})(({
  ownerState
}) => ({
  filter: ownerState.isHighlighted && 'saturate(120%)' || ownerState.isFaded && 'saturate(80%)' || undefined,
  fill: ownerState.color,
  shapeRendering: 'crispEdges'
}));
const useUtilityClasses = ownerState => {
  const {
    classes,
    seriesId,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    cell: ['cell', `series-${seriesId}`, isFaded && 'faded', isHighlighted && 'highlighted']
  };
  return composeClasses(slots, getHeatmapUtilityClass, classes);
};

/**
 * @ignore - internal component.
 */
function HeatmapItem(props) {
  const {
      seriesId,
      dataIndex,
      color,
      value,
      slotProps = {},
      slots = {}
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const getInteractionItemProps = useInteractionItemProps();
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId,
    dataIndex
  });
  const ownerState = {
    seriesId,
    dataIndex,
    color,
    value,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses(ownerState);
  const Cell = slots?.cell ?? HeatmapCell;
  const cellProps = useSlotProps({
    elementType: Cell,
    additionalProps: _extends({}, getInteractionItemProps({
      type: 'heatmap',
      seriesId,
      dataIndex
    })),
    externalForwardedProps: _extends({}, other),
    externalSlotProps: slotProps.cell,
    ownerState,
    className: classes.cell
  });
  return /*#__PURE__*/_jsx(Cell, _extends({}, cellProps));
}
process.env.NODE_ENV !== "production" ? HeatmapItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  color: PropTypes.string.isRequired,
  dataIndex: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired,
  seriesId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object,
  value: PropTypes.number.isRequired,
  width: PropTypes.number.isRequired,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired
} : void 0;
export { HeatmapItem };