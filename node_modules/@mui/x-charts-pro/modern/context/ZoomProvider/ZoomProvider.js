'use client';

import * as React from 'react';
import useControlled from '@mui/utils/useControlled';
import { ZoomContext } from "./ZoomContext.js";
import { defaultizeZoom } from "./defaultizeZoom.js";
import { initializeZoomData } from "./initializeZoomData.js";
import { jsx as _jsx } from "react/jsx-runtime";
export function ZoomProvider({
  children,
  xAxis,
  yAxis,
  zoom,
  onZoomChange
}) {
  const [isInteracting, setIsInteracting] = React.useState(false);
  const options = React.useMemo(() => [...defaultizeZoom(xAxis, 'x'), ...defaultizeZoom(yAxis, 'y')].reduce((acc, v) => {
    acc[v.axisId] = v;
    return acc;
  }, {}), [xAxis, yAxis]);

  // Default zoom data is initialized only once when uncontrolled. If the user changes the options
  // after the initial render, the zoom data will not be updated until the next zoom interaction.
  // This is required to avoid warnings about controlled/uncontrolled components.
  const defaultZoomData = React.useRef(initializeZoomData(options));
  const [zoomData, setZoomData] = useControlled({
    controlled: zoom,
    default: defaultZoomData.current,
    name: 'ZoomProvider',
    state: 'zoom'
  });
  const setZoomDataCallback = React.useCallback(newZoomData => {
    setZoomData(newZoomData);
    onZoomChange?.(newZoomData);
  }, [setZoomData, onZoomChange]);
  const value = React.useMemo(() => ({
    isInitialized: true,
    data: {
      isZoomEnabled: Object.keys(options).length > 0,
      isPanEnabled: isPanEnabled(options),
      options,
      zoomData,
      setZoomData: setZoomDataCallback,
      isInteracting,
      setIsInteracting
    }
  }), [zoomData, isInteracting, setIsInteracting, options, setZoomDataCallback]);
  return /*#__PURE__*/_jsx(ZoomContext.Provider, {
    value: value,
    children: children
  });
}
function isPanEnabled(options) {
  return Object.values(options).some(v => v.panning) || false;
}