'use client';

import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { useDrawingArea, useSeries, CartesianContext, computeAxisValue, useXExtremumGetter, useYExtremumGetter } from '@mui/x-charts/internals';
import { useZoom } from "../ZoomProvider/useZoom.js";
import { createAxisFilterMapper, createGetAxisFilters } from "./createAxisFilterMapper.js";
import { jsx as _jsx } from "react/jsx-runtime";
function CartesianProviderPro(props) {
  const {
    xAxis,
    yAxis,
    children
  } = props;
  const formattedSeries = useSeries();
  const drawingArea = useDrawingArea();
  const {
    zoomData,
    options
  } = useZoom();
  const xExtremumGetters = useXExtremumGetter();
  const yExtremumGetters = useYExtremumGetter();
  const getFilters = React.useMemo(() => {
    const xMapper = createAxisFilterMapper({
      zoomData,
      extremumGetter: xExtremumGetters,
      formattedSeries,
      direction: 'x'
    });
    const yMapper = createAxisFilterMapper({
      zoomData,
      extremumGetter: yExtremumGetters,
      formattedSeries,
      direction: 'y'
    });
    const xFilters = xAxis.reduce((acc, axis, index) => {
      const filter = xMapper(axis, index);
      if (filter !== null) {
        acc[axis.id] = filter;
      }
      return acc;
    }, {});
    const yFilters = yAxis.reduce((acc, axis, index) => {
      const filter = yMapper(axis, index);
      if (filter !== null) {
        acc[axis.id] = filter;
      }
      return acc;
    }, {});
    if (Object.keys(xFilters).length === 0 && Object.keys(yFilters).length === 0) {
      return undefined;
    }
    return createGetAxisFilters(_extends({}, xFilters, yFilters));
  }, [formattedSeries, xAxis, xExtremumGetters, yAxis, yExtremumGetters, zoomData]);
  const xValues = React.useMemo(() => computeAxisValue({
    drawingArea,
    formattedSeries,
    axis: xAxis,
    extremumGetters: xExtremumGetters,
    axisDirection: 'x',
    zoomData,
    zoomOptions: options,
    getFilters
  }), [drawingArea, formattedSeries, xAxis, xExtremumGetters, zoomData, options, getFilters]);
  const yValues = React.useMemo(() => computeAxisValue({
    drawingArea,
    formattedSeries,
    axis: yAxis,
    extremumGetters: yExtremumGetters,
    axisDirection: 'y',
    zoomData,
    zoomOptions: options,
    getFilters
  }), [drawingArea, formattedSeries, yAxis, yExtremumGetters, zoomData, options, getFilters]);
  const value = React.useMemo(() => ({
    isInitialized: true,
    data: {
      xAxis: xValues.axis,
      yAxis: yValues.axis,
      xAxisIds: xValues.axisIds,
      yAxisIds: yValues.axisIds
    }
  }), [xValues, yValues]);
  return /*#__PURE__*/_jsx(CartesianContext.Provider, {
    value: value,
    children: children
  });
}
export { CartesianProviderPro };