"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeatmapPlot = HeatmapPlot;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _hooks = require("@mui/x-charts/hooks");
var _useSeries = require("../hooks/useSeries");
var _HeatmapItem = require("./HeatmapItem");
var _jsxRuntime = require("react/jsx-runtime");
function HeatmapPlot(props) {
  const xScale = (0, _hooks.useXScale)();
  const yScale = (0, _hooks.useYScale)();
  const colorScale = (0, _hooks.useZColorScale)();
  const series = (0, _useSeries.useHeatmapSeries)();
  const xDomain = xScale.domain();
  const yDomain = yScale.domain();
  if (!series || series.seriesOrder.length === 0) {
    return null;
  }
  const seriesToDisplay = series.series[series.seriesOrder[0]];
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("g", {
    children: seriesToDisplay.data.map(([xIndex, yIndex, value], dataIndex) => {
      const x = xScale(xDomain[xIndex]);
      const y = yScale(yDomain[yIndex]);
      const color = colorScale?.(value);
      if (x === undefined || y === undefined || !color) {
        return null;
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_HeatmapItem.HeatmapItem, {
        width: xScale.bandwidth(),
        height: yScale.bandwidth(),
        x: x,
        y: y,
        color: color,
        dataIndex: dataIndex,
        seriesId: series.seriesOrder[0],
        value: value,
        slots: props.slots,
        slotProps: props.slotProps
      }, `${xIndex}_${yIndex}`);
    })
  });
}
process.env.NODE_ENV !== "production" ? HeatmapPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: _propTypes.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: _propTypes.default.object
} : void 0;