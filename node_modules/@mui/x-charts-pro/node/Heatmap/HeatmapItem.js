"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeatmapItem = HeatmapItem;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _styles = require("@mui/material/styles");
var _useSlotProps = _interopRequireDefault(require("@mui/utils/useSlotProps"));
var _composeClasses = _interopRequireDefault(require("@mui/utils/composeClasses"));
var _context = require("@mui/x-charts/context");
var _internals = require("@mui/x-charts/internals");
var _heatmapClasses = require("./heatmapClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["seriesId", "dataIndex", "color", "value", "slotProps", "slots"];
const HeatmapCell = (0, _styles.styled)('rect', {
  name: 'MuiHeatmap',
  slot: 'Cell',
  overridesResolver: (_, styles) => styles.arc
})(({
  ownerState
}) => ({
  filter: ownerState.isHighlighted && 'saturate(120%)' || ownerState.isFaded && 'saturate(80%)' || undefined,
  fill: ownerState.color,
  shapeRendering: 'crispEdges'
}));
const useUtilityClasses = ownerState => {
  const {
    classes,
    seriesId,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    cell: ['cell', `series-${seriesId}`, isFaded && 'faded', isHighlighted && 'highlighted']
  };
  return (0, _composeClasses.default)(slots, _heatmapClasses.getHeatmapUtilityClass, classes);
};

/**
 * @ignore - internal component.
 */
function HeatmapItem(props) {
  const {
      seriesId,
      dataIndex,
      color,
      value,
      slotProps = {},
      slots = {}
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const getInteractionItemProps = (0, _internals.useInteractionItemProps)();
  const {
    isFaded,
    isHighlighted
  } = (0, _context.useItemHighlighted)({
    seriesId,
    dataIndex
  });
  const ownerState = {
    seriesId,
    dataIndex,
    color,
    value,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses(ownerState);
  const Cell = slots?.cell ?? HeatmapCell;
  const cellProps = (0, _useSlotProps.default)({
    elementType: Cell,
    additionalProps: (0, _extends2.default)({}, getInteractionItemProps({
      type: 'heatmap',
      seriesId,
      dataIndex
    })),
    externalForwardedProps: (0, _extends2.default)({}, other),
    externalSlotProps: slotProps.cell,
    ownerState,
    className: classes.cell
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Cell, (0, _extends2.default)({}, cellProps));
}
process.env.NODE_ENV !== "production" ? HeatmapItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  color: _propTypes.default.string.isRequired,
  dataIndex: _propTypes.default.number.isRequired,
  height: _propTypes.default.number.isRequired,
  seriesId: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: _propTypes.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: _propTypes.default.object,
  value: _propTypes.default.number.isRequired,
  width: _propTypes.default.number.isRequired,
  x: _propTypes.default.number.isRequired,
  y: _propTypes.default.number.isRequired
} : void 0;