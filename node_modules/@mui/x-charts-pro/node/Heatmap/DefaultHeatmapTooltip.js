"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultHeatmapTooltip = DefaultHeatmapTooltip;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _ChartsTooltip = require("@mui/x-charts/ChartsTooltip");
var _hooks = require("@mui/x-charts/hooks");
var _internals = require("@mui/x-charts/internals");
var _jsxRuntime = require("react/jsx-runtime");
function DefaultHeatmapTooltip(props) {
  const {
    series,
    itemData,
    sx,
    classes,
    getColor
  } = props;
  const xAxis = (0, _hooks.useXAxis)();
  const yAxis = (0, _hooks.useYAxis)();
  if (itemData.dataIndex === undefined || !series.data[itemData.dataIndex]) {
    return null;
  }
  const color = getColor(itemData.dataIndex);
  const valueItem = series.data[itemData.dataIndex];
  const [xIndex, yIndex] = valueItem;
  const formattedX = xAxis.valueFormatter?.(xAxis.data[xIndex], {
    location: 'tooltip'
  }) ?? xAxis.data[xIndex].toLocaleString();
  const formattedY = yAxis.valueFormatter?.(yAxis.data[yIndex], {
    location: 'tooltip'
  }) ?? yAxis.data[yIndex].toLocaleString();
  const formattedValue = series.valueFormatter(valueItem, {
    dataIndex: itemData.dataIndex
  });
  const seriesLabel = (0, _internals.getLabel)(series.label, 'tooltip');
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipPaper, {
    sx: sx,
    className: classes.root,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_ChartsTooltip.ChartsTooltipTable, {
      className: classes.table,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("thead", {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_ChartsTooltip.ChartsTooltipRow, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipCell, {
            children: formattedX
          }), formattedX && formattedY && /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipCell, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipCell, {
            children: formattedY
          })]
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("tbody", {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_ChartsTooltip.ChartsTooltipRow, {
          className: classes.row,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipCell, {
            className: (0, _clsx.default)(classes.markCell, classes.cell),
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipMark, {
              color: color,
              className: classes.mark
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipCell, {
            className: (0, _clsx.default)(classes.labelCell, classes.cell),
            children: seriesLabel
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ChartsTooltip.ChartsTooltipCell, {
            className: (0, _clsx.default)(classes.valueCell, classes.cell),
            children: formattedValue
          })]
        })
      })]
    })
  });
}
process.env.NODE_ENV !== "production" ? DefaultHeatmapTooltip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object.isRequired,
  /**
   * Get the color of the item with index `dataIndex`.
   * @param {number} dataIndex The data index of the item.
   * @returns {string} The color to display.
   */
  getColor: _propTypes.default.func.isRequired,
  /**
   * The data used to identify the triggered item.
   */
  itemData: _propTypes.default.shape({
    dataIndex: _propTypes.default.number.isRequired,
    seriesId: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,
    type: _propTypes.default.oneOf(['heatmap']).isRequired
  }).isRequired,
  /**
   * The series linked to the triggered item.
   */
  series: _propTypes.default.object.isRequired,
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
} : void 0;