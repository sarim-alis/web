"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZoomProvider = ZoomProvider;
var React = _interopRequireWildcard(require("react"));
var _useControlled = _interopRequireDefault(require("@mui/utils/useControlled"));
var _ZoomContext = require("./ZoomContext");
var _defaultizeZoom = require("./defaultizeZoom");
var _initializeZoomData = require("./initializeZoomData");
var _jsxRuntime = require("react/jsx-runtime");
function ZoomProvider({
  children,
  xAxis,
  yAxis,
  zoom,
  onZoomChange
}) {
  const [isInteracting, setIsInteracting] = React.useState(false);
  const options = React.useMemo(() => [...(0, _defaultizeZoom.defaultizeZoom)(xAxis, 'x'), ...(0, _defaultizeZoom.defaultizeZoom)(yAxis, 'y')].reduce((acc, v) => {
    acc[v.axisId] = v;
    return acc;
  }, {}), [xAxis, yAxis]);

  // Default zoom data is initialized only once when uncontrolled. If the user changes the options
  // after the initial render, the zoom data will not be updated until the next zoom interaction.
  // This is required to avoid warnings about controlled/uncontrolled components.
  const defaultZoomData = React.useRef((0, _initializeZoomData.initializeZoomData)(options));
  const [zoomData, setZoomData] = (0, _useControlled.default)({
    controlled: zoom,
    default: defaultZoomData.current,
    name: 'ZoomProvider',
    state: 'zoom'
  });
  const setZoomDataCallback = React.useCallback(newZoomData => {
    setZoomData(newZoomData);
    onZoomChange?.(newZoomData);
  }, [setZoomData, onZoomChange]);
  const value = React.useMemo(() => ({
    isInitialized: true,
    data: {
      isZoomEnabled: Object.keys(options).length > 0,
      isPanEnabled: isPanEnabled(options),
      options,
      zoomData,
      setZoomData: setZoomDataCallback,
      isInteracting,
      setIsInteracting
    }
  }), [zoomData, isInteracting, setIsInteracting, options, setZoomDataCallback]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ZoomContext.ZoomContext.Provider, {
    value: value,
    children: children
  });
}
function isPanEnabled(options) {
  return Object.values(options).some(v => v.panning) || false;
}