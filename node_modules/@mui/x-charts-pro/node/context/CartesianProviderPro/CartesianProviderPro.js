"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CartesianProviderPro = CartesianProviderPro;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _internals = require("@mui/x-charts/internals");
var _useZoom = require("../ZoomProvider/useZoom");
var _createAxisFilterMapper = require("./createAxisFilterMapper");
var _jsxRuntime = require("react/jsx-runtime");
function CartesianProviderPro(props) {
  const {
    xAxis,
    yAxis,
    children
  } = props;
  const formattedSeries = (0, _internals.useSeries)();
  const drawingArea = (0, _internals.useDrawingArea)();
  const {
    zoomData,
    options
  } = (0, _useZoom.useZoom)();
  const xExtremumGetters = (0, _internals.useXExtremumGetter)();
  const yExtremumGetters = (0, _internals.useYExtremumGetter)();
  const getFilters = React.useMemo(() => {
    const xMapper = (0, _createAxisFilterMapper.createAxisFilterMapper)({
      zoomData,
      extremumGetter: xExtremumGetters,
      formattedSeries,
      direction: 'x'
    });
    const yMapper = (0, _createAxisFilterMapper.createAxisFilterMapper)({
      zoomData,
      extremumGetter: yExtremumGetters,
      formattedSeries,
      direction: 'y'
    });
    const xFilters = xAxis.reduce((acc, axis, index) => {
      const filter = xMapper(axis, index);
      if (filter !== null) {
        acc[axis.id] = filter;
      }
      return acc;
    }, {});
    const yFilters = yAxis.reduce((acc, axis, index) => {
      const filter = yMapper(axis, index);
      if (filter !== null) {
        acc[axis.id] = filter;
      }
      return acc;
    }, {});
    if (Object.keys(xFilters).length === 0 && Object.keys(yFilters).length === 0) {
      return undefined;
    }
    return (0, _createAxisFilterMapper.createGetAxisFilters)((0, _extends2.default)({}, xFilters, yFilters));
  }, [formattedSeries, xAxis, xExtremumGetters, yAxis, yExtremumGetters, zoomData]);
  const xValues = React.useMemo(() => (0, _internals.computeAxisValue)({
    drawingArea,
    formattedSeries,
    axis: xAxis,
    extremumGetters: xExtremumGetters,
    axisDirection: 'x',
    zoomData,
    zoomOptions: options,
    getFilters
  }), [drawingArea, formattedSeries, xAxis, xExtremumGetters, zoomData, options, getFilters]);
  const yValues = React.useMemo(() => (0, _internals.computeAxisValue)({
    drawingArea,
    formattedSeries,
    axis: yAxis,
    extremumGetters: yExtremumGetters,
    axisDirection: 'y',
    zoomData,
    zoomOptions: options,
    getFilters
  }), [drawingArea, formattedSeries, yAxis, yExtremumGetters, zoomData, options, getFilters]);
  const value = React.useMemo(() => ({
    isInitialized: true,
    data: {
      xAxis: xValues.axis,
      yAxis: yValues.axis,
      xAxisIds: xValues.axisIds,
      yAxisIds: yValues.axisIds
    }
  }), [xValues, yValues]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_internals.CartesianContext.Provider, {
    value: value,
    children: children
  });
}